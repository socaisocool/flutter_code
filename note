第6章内容   代码中#6
实现如上图所示的首页模块
熟悉页面异常状态的处理思路
熟悉和掌握沉浸式状态栏问题的解决方案
掌握双Feed列表的实现方案
熟悉Flutter图片加载原理
掌握列表在使用过程中常见问题的解决方案
掌握下拉刷新和上拉分页的实现思路
能够基于Lottie实现全局加载组件
使用dart collection if灵活创建列表
熟悉iOS 9，Android 9之后不允许铭文传输问题解决


自己撸码遇到的问题
1、HiCache中的_pre()在项目中识别的作为一个方法，而不是视频中是作为一个命名构造函数
2、页面异常
运行app时，在首页请求数据回来之前，点击排行，有可能出现以下的异常
Unhandled Exception: setState() called after dispose(): _HomePageState#c7e7a(lifecycle state: defunct, not mounted, tickers: tracking 1 ticker)
This error happens if you call setState() on a State object for a widget that no longer appears in the widget tree (e.g., whose parent widget no longer includes the widget in its build). This error can occur when code calls setState() from a timer or an animation callback.
The preferred solution is to cancel the timer or stop listening to the animation in the dispose() callback. Another solution is to check the "mounted" property of this object before calling setState() to ensure the object is still in the tree.
This error might indicate a memory leak if setState() is being called because another object is retaining a reference to this State object after it has
 been removed from the tree. To avoid memory leaks, consider breaking the reference to this object during dispose().
 这个异常的大意就是：在widget的执行dispose后调用了setState函数重绘Widget时会抛出异常，这个问题统称界面状态异常，解决思路：
3、Image.network出现 type 'Null' is not a subtype of type 'List<int>' in type cast错误


4、ios9与Android9开始如果请求的图片地址或者接口地址是Http的化那么就会报
Bad state:Insecure Http is not allow by platform: http://~


5、HomePage如果没有设置SafeArea时，轮播图上边就会多处一个空白边距，无法修改
使用ListView默认有一个上边距，可以通过外层嵌套一个MediaQuery.removePadding(removeTop:true,child)去移除

也就是SafeArea+ListView 没有上边距离，ListView单独使用就有上边距

6、https://github.com/fluttercandies/JsonToDart这个地址的JsonToDart插件生成的Dart Bean并没有解决空安全问题，
这个插件可以生成非空类型的DartBean并且能够通过Dart2.5编译器的语法检查，对于不确定后台一定会下发的字段，要么生命为空类型
要么赋值给非空类型时，可以采用??非空类型的默认值

比如首页除了推荐分类是有categoryList与bannerList的其他分类都没有，因此这两个字段要么修改为空类型，或者存在null赋值给no null变量
时要对可空数据做??操作

  factory HomeMo.fromJson(Map<String, dynamic> jsonRes) {
    final List<BannerMo>? bannerList =
        jsonRes['bannerList'] is List ? <BannerMo>[] : null;
    if (bannerList != null) {
      for (final dynamic item in jsonRes['bannerList']!) {
        if (item != null) {
          bannerList.add(BannerMo.fromJson(asT<Map<String, dynamic>>(item)!));
        }
      }
    }

    final List<CategoryMo>? categoryList =
        jsonRes['categoryList'] is List ? <CategoryMo>[] : null;
    if (categoryList != null) {
      for (final dynamic item in jsonRes['categoryList']!) {
        if (item != null) {
          categoryList
              .add(CategoryMo.fromJson(asT<Map<String, dynamic>>(item)!));
        }
      }
    }

    final List<VideoMo>? videoList =
        jsonRes['videoList'] is List ? <VideoMo>[] : null;
    if (videoList != null) {
      for (final dynamic item in jsonRes['videoList']!) {
        if (item != null) {
          videoList.add(VideoMo.fromJson(asT<Map<String, dynamic>>(item)!));
        }
      }
    }
    return HomeMo(//这句，bannerList与categoryList后台不一定下传，所以两个都有可能为null，如果直接赋值给HomeMo中的非空bannerList
      //是会报错的，随意直接加??如果为null就用一个非空默认值去初始化
      bannerList: bannerList ?? [],
      categoryList: categoryList ?? [],
      videoList: videoList!,
    );
    也就是DartBean每个字段都是声明为非空类型，实际解析过程，这些字段是可能为null的，如果为null，要么修改DartBean本身的可空字段的类型
    要么初始化时传一个默认的非空值。

7、
视频中的flutter_statusbar_manager: ^2.0.0 是非空安全的插件，直接把源代码放进项目里，让它支持空类型

第七章：
1、自定义视频播放器UI的源码，fa_pub中的hi_video_controll文件中的MaterialControls是支持空安全类型的而电子书中的那个源码是不支持空安全类型的

2、对chewie在android平台下关于界面控制样式的定制
https://github.com/brianegan/chewie/tree/master/lib/src这个是chewie库目录下的源代码，这个路径下，可以看到文件夹cupertine/material
这两个文件夹分别是对于iOS/android的样式适配，cupertinoControll/MaterialControls分别是决定ios/android界面控制样式的类,
我们直接把对应平台的代码拷贝到项目中根据需求改动，在本项目中hi_video_controlls中的MaterialControls就是自己定制的android界面样式

ChewieController中有一个参数customControls是用来决定界面控制的样式的，我们自定义的"MaterialControls"类就是通过这个参数传递给chewie

import 'package:chewie/chewie.dart' hide MaterialControls;
import 'hi_video_controls.dart';

3、"hide"关键字的使用
import 'package:chewie' 导入这个包是为了使用Chewie这个组件，这个包中默认也包括了针对于android与ios的界面控制样式类：
cupertineControls/MaterialControls,我们项目是直接拷贝Chewie中的MaterialControls来修改，所以在当前文件中MaterialControls默认是会
引用chewie中默认未改动的MaterialControls类，如果要使用自己定制的同名类，可以先用关键字"hide"隐藏chewie库中的MaterialControls，
这样编译器就会让我们自己去关联对应的位置的MaterialControls类

4、android中chewie在未开启视频时点击全屏会报
I/flutter (17282): _onExpandCollapse:videoPlayerController.value.size is null.
视频里的版本是
chewie: ^1.2.0
video_player: ^2.1.4
我这里不管用哪个版本都是输出上面的错误，而不是视频中的崩溃信息，
hi_video_contrils中的_onExpandCollapse方法的#1是修复代码-》为了兼容ios


5、全屏->非全屏  越界异常使用以下的插件   为了兼容ios
 orientation: ^1.2.0

 这个插件是可以强制把屏幕显示模式修改为横屏或者竖屏，视频处于全屏模式时宽高是颠倒的，如果此时的屏幕显示模式不变就出现越界异常。
 比如1280x720的屏幕在横屏模式，宽是720高是1280，你让视频显示全屏，也就是宽是1280高是720，此时屏幕模式没有修改，那么1280>720就出现了界面异常
 此时只要通过orientation这个插件把屏幕的显示模式修改一下，就不会有越界问题了

6、监听APP是否处于后台状态的监听可以使用WidgetsBindingObserver&widgetsBinding.instance.addObserver

FractionallySizedBox、MediaQuery、




